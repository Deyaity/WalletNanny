/**
 * Created by Guille on 2/18/17.
 */
var https = require('https');

var participants = [];

exports.handler = (event, context) => {
    try {

        if (event.session.new) {
            // New Session
            console.log("NEW SESSION")
        }

        switch (event.request.type) {

            case "LaunchRequest":
                // > Launch Request
                var speechText = "";
                speechText += "Welcome to Alexa CheckMyBudget, ";
                speechText += "You can tell me to do stuff like Add Job.  ";
                var repromptText = "For instructions on what you can say, please say help me check my budget.";
                //this.emit(':ask', speechText, repromptText);
                //console.log('LAUNCH REQUEST')
                context.succeed(
                    generateResponse(
                        buildSpeechletResponse(speechText,repromptText, false),
                        {}
                    )
                )
                break;

            case "IntentRequest":
                // > Intent Request
                console.log(event.request.intent)
                if (event.request.intent.name.toUpperCase() === "ADDJOB") {
                    context.succeed(
                        generateResponse(
                            buildSpeechletResponse("You worked " + event.request.intent.slots.Hours.value + " hours this week, and made " + (event.request.intent.slots.Hours.value * event.request.intent.slots.Wages.value) + " dollars for that time.", "blah", true),
                            {}
                        )
                    )
                } else {
                    context.succeed(
                        generateResponse(
                            buildSpeechletResponse("No Job Found", "Please ask for another intent", false),
                            {}
                        )
                    )
                }
                break;

            case "SessionEndedRequest":
                // > Session Ended Request
                console.log('SESSION ENDED REQUEST')
                break;

            default:
                context.fail('INVALID REQUEST TYPE: ${event.request.type}')

        }

    } catch(error) {context.fail('Exeption: ' + error)}
}





buildSpeechletResponse = (outputText, repromptText, shouldEndSession) => {

    return {
        outputSpeech: {
            type: "PlainText",
            text: outputText
        },
        reprompt: {
          outputSpeech: {
            type: "PlainText",
            text: repromptText
          }
        },
        shouldEndSession: shouldEndSession
    }

}

generateResponse = (speechletResponse, sessionAttributes) => {

    return {
        version: "1.0",
        sessionAttributes: sessionAttributes,
        response: speechletResponse
    }

}
